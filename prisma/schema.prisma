// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  CUSTOMER
}
enum MessageType {
  TEXT
  MEDIA
  AUDIO
}

enum ConversationType {
  WITH_ASSISTANT
  WITH_USER
}

model User {

  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  email                 String    @unique
  password              String?
  role                  UserRole  @default(USER)
  isAdmin               Boolean   @default(false)
  bio                   String?
  isTwoFactorEnabled    Boolean   @default(false)
  twoFactorConfirmation TwoFactorConfirmation? 
  emailVerified         DateTime? 
  image                 String?
  account               Account[]
  
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Account {

  id                 String   @default(auto()) @id @map("_id") @db.ObjectId
  userId             String   @unique @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects           Project[]
  activeProject      Project? @relation("ActiveProject", fields: [activeProjectId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  activeProjectId    String?  @db.ObjectId

  initiatedConversations  Conversation[]  @relation("initiator")
  participantConversations  Conversation[]  @relation("participant")
 
  messages           Message[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Project {
  
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  accountId   String   @db.ObjectId
  account     Account  @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  
  flows       Flow[]
  channels    Channel[]
  collaborators     Account[] @relation("ActiveProject")
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Flow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
}

model Channel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId String   @db.ObjectId
  project   Project  @relation(fields: [projectId], references: [id])
}

model VerificationToken {
  id            String    @default(auto()) @id @map("_id") @db.ObjectId
  email         String
  token         String    @unique
  expires       DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id            String    @id  @default(auto()) @map("_id") @db.ObjectId
  email         String
  token         String    @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id            String    @id @map("_id") @default(auto()) @db.ObjectId
  email         String
  token         String    @unique
  expires       DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id            String    @id @map("_id") @default(auto()) @db.ObjectId
  userId        String    @db.ObjectId
  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}


model Conversation {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId

  conversationType  ConversationType @default(WITH_USER)
  initiatorId       String  @db.ObjectId
  participantId     String  @db.ObjectId

  initiator         Account @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)
  participant       Account @relation("participant", fields: [participantId], references: [id], onDelete: Cascade)

  messages          Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 

  @@unique([initiatorId, participantId])
}

model Message {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  fileUrls      String[]
  caption       String?

  senderId      String @db.ObjectId
  sender        Account  @relation(fields: [senderId], references: [id]) 

  messageType   MessageType @default(TEXT)

  conversationId String @db.ObjectId      
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([senderId])
  @@index([conversationId])
}